{"version":3,"sources":["redux/actions/contact-action.js","redux/constants/contacts-actionType.js","redux/reducers/contact-reducer.js","redux/reducers/root-reducer.js","redux/store.js","components/form/Form.js","components/filter/Filter.js","components/singleContact/SingleContact.js","components/contactList/ContactList.js","components/app/App.js","index.js"],"names":["addContact","createAction","name","number","payload","id","uuidv4","deleteContact","storageContact","filterContact","target","value","items","createReducer","state","filter","contact","combineReducers","store","configureStore","reducer","contacts","rootReducer","devTools","process","initState","Form","handlerChange","setState","handlerSubmit","event","preventDefault","props","find","toast","error","this","className","onSubmit","type","pattern","placeholder","title","required","onChange","Component","mapDispatchToProps","connect","ownProps","dispatch","onClick","aria-hidden","normalizedFilter","toLowerCase","includes","TransitionGroup","component","map","CSSTransition","classNames","timeout","App","animation","savedContacts","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","in","appear","unmountOnExit","length","autoClose","position","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.653d27c5.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\"\r\nimport { v4 as uuidv4 } from \"uuid\"\r\nimport { ADD_CONTACT, DELETE_CONTACT, STORAGE_CONTACT, FILTER_CONTACT } from \"../constants/contacts-actionType\"\r\n\r\nconst addContact = createAction(ADD_CONTACT, (name, number) => ({\r\n  payload: {\r\n    id: uuidv4(),\r\n    name,\r\n    number,\r\n  },\r\n}))\r\n\r\nconst deleteContact = createAction(DELETE_CONTACT)\r\nconst storageContact = createAction(STORAGE_CONTACT)\r\nconst filterContact = createAction(FILTER_CONTACT, ({ target }) => ({\r\n  payload: target.value,\r\n}))\r\n\r\nexport { addContact, deleteContact, storageContact, filterContact }\r\n","const ADD_CONTACT = \"@contacts/add\"\r\nconst DELETE_CONTACT = \"@contact/delete\"\r\nconst STORAGE_CONTACT = \"@contact/storage\"\r\nconst FILTER_CONTACT = \"@contact/filter\"\r\n\r\nexport { ADD_CONTACT, DELETE_CONTACT, STORAGE_CONTACT, FILTER_CONTACT }\r\n","import { createReducer } from \"@reduxjs/toolkit\"\r\nimport { addContact, deleteContact, storageContact, filterContact } from \"../actions/contact-action\"\r\n\r\nconst removeContact = (state, { payload }) => state.filter((contact) => contact.id !== payload)\r\n\r\nconst items = createReducer([], {\r\n  [addContact]: (state, { payload }) => [...state, payload],\r\n  [deleteContact]: removeContact,\r\n  [storageContact]: (state, { payload }) => payload,\r\n})\r\n\r\nconst filter = createReducer(\"\", {\r\n  [filterContact]: (state, { payload }) => (state = payload),\r\n})\r\n\r\nexport { items, filter }\r\n","import { combineReducers } from \"redux\"\r\nimport { items, filter } from \"../reducers/contact-reducer\"\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n})\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport rootReducer from './reducers/root-reducer';\r\n\r\nconst store = configureStore({\r\n  reducer: { contacts: rootReducer },\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n});\r\n\r\nexport default store;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport PropTypes from 'prop-types';\r\nimport { addContact } from '../../redux/actions/contact-action';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './Form.scss';\r\n\r\nconst initState = {\r\n  name: '',\r\n  number: '',\r\n};\r\n\r\nclass Form extends Component {\r\n  state = {\r\n    ...initState,\r\n  };\r\n\r\n  handlerChange = ({ target }) => {\r\n    const { value, name } = target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handlerSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    const { name, number } = this.state;\r\n    const { contacts } = this.props;\r\n    const isExists = contacts.find(contact => contact.name === name);\r\n\r\n    if (isExists) {\r\n      toast.error('This contact is already exist');\r\n\r\n      return this.setState({ ...initState });\r\n    }\r\n\r\n    this.props.addContact(name, number);\r\n    this.setState({ ...initState });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <form className=\"form\" onSubmit={this.handlerSubmit}>\r\n          <label className=\"form_label\">\r\n            Name\r\n            <input\r\n              className=\"form_input\"\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={name}\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              placeholder=\"John Smith\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              onChange={this.handlerChange}\r\n            />\r\n          </label>\r\n          <label className=\"form_label\">\r\n            Number\r\n            <input\r\n              className=\"form_input\"\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              value={number}\r\n              pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{3})\"\r\n              placeholder=\"+48-796-287-373\"\r\n              title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n              required\r\n              onChange={this.handlerChange}\r\n            />\r\n          </label>\r\n          <button type=\"submit\" className=\"form_button\">\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: state.contacts.items,\r\n  filter: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  addContact,\r\n};\r\n\r\nForm.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      id: PropTypes.string,\r\n      number: PropTypes.string,\r\n    }),\r\n  ).isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n  addContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\r\n","import { connect } from \"react-redux\"\r\nimport PropTypes from \"prop-types\"\r\nimport { filterContact } from \"../../redux/actions/contact-action\"\r\nimport \"./Filter.scss\"\r\n\r\nconst Filter = ({ filter, filterContact }) => {\r\n  return (\r\n    <div className=\"filter_container\">\r\n      <label className=\"filter_label\">\r\n        Filter\r\n        <input\r\n          className=\"filter_input\"\r\n          type=\"text\"\r\n          name=\"filter\"\r\n          placeholder=\"Find contacts by name\"\r\n          value={filter}\r\n          onChange={filterContact}\r\n        />\r\n      </label>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  filter: state.contacts.filter,\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n  filterContact,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter)\r\n\r\nFilter.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      id: PropTypes.string,\r\n      number: PropTypes.string,\r\n    }).isRequired\r\n  ),\r\n  filter: PropTypes.string.isRequired,\r\n  filterContact: PropTypes.func.isRequired,\r\n}\r\n","import { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { deleteContact } from '../../redux/actions/contact-action';\r\nimport './SingleContact.scss';\r\n\r\nconst SingleContact = ({ name, number, deleteContact }) => {\r\n  return (\r\n    <li className=\"contact\">\r\n      <h4>{name}</h4>\r\n      <p className=\"contact_number\">{number}</p>\r\n      <button className=\"delete_button\" type=\"button\" onClick={deleteContact}>\r\n        <i className=\"fa fa-trash\" aria-hidden=\"true\" />\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const contact = state.contacts.items.find(\r\n    contact => contact.id === ownProps.id,\r\n  );\r\n  return { ...contact };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  deleteContact: () => dispatch(deleteContact(ownProps.id)),\r\n});\r\n\r\nSingleContact.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleContact);\r\n","import { connect } from \"react-redux\"\r\nimport PropTypes from \"prop-types\"\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\"\r\nimport SingleContact from \"../singleContact/SingleContact\"\r\nimport \"./ContactList.scss\"\r\n\r\nconst ContactList = ({ contacts }) => {\r\n  return (\r\n    <TransitionGroup component=\"ul\" className=\"contact_list\">\r\n      {contacts.map(({ id }) => (\r\n        <CSSTransition key={id} classNames=\"list_item\" timeout={250}>\r\n          <SingleContact id={id} />\r\n        </CSSTransition>\r\n      ))}\r\n    </TransitionGroup>\r\n  )\r\n}\r\nconst mapStateToProps = (state) => {\r\n  const { items, filter } = state.contacts\r\n  const normalizedFilter = filter.toLowerCase()\r\n\r\n  const getMatchingContact = items.filter((contact) => contact.name.toLowerCase().includes(normalizedFilter))\r\n  return {\r\n    contacts: getMatchingContact,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ContactList)\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      id: PropTypes.string,\r\n      number: PropTypes.string,\r\n    })\r\n  ).isRequired,\r\n}\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { CSSTransition } from 'react-transition-group';\nimport { ToastContainer } from 'react-toastify';\nimport { storageContact } from '../../redux/actions/contact-action';\nimport Form from '../form/Form';\nimport Filter from '../filter/Filter';\nimport ContactList from '../contactList/ContactList';\nimport './App.scss';\n\nclass App extends Component {\n  state = {\n    animation: false,\n  };\n\n  componentDidMount() {\n    this.setState(state => ({\n      animation: !state.animation,\n    }));\n\n    const savedContacts = localStorage.getItem('contacts');\n    if (savedContacts) {\n      this.props.storageContact(JSON.parse(savedContacts));\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { contacts } = this.props;\n    if (prevProps.contacts !== contacts) {\n      localStorage.setItem('contacts', JSON.stringify(contacts));\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"app_container\">\n        {/* APPLICATION TITLE */}\n        <CSSTransition\n          in={true}\n          appear={true}\n          classNames=\"title_slider\"\n          timeout={500}\n          unmountOnExit\n        >\n          <h1 className=\"app_title\">Phonebook</h1>\n        </CSSTransition>\n\n        {/* APPLICATION FORM */}\n        <section className=\"section\">\n          <Form />\n        </section>\n\n        {/* CONTACTS FILTER */}\n        <CSSTransition\n          in={this.props.contacts.length > 1}\n          classNames=\"filter_animation\"\n          timeout={250}\n          unmountOnExit\n        >\n          <section className=\"section\">\n            <Filter />\n          </section>\n        </CSSTransition>\n\n        {/* CONTACTS LIST */}\n        <ContactList />\n\n        {/* ALERT NOTIFICATION */}\n        <ToastContainer autoClose={2500} position=\"top-right\" type=\"error\" />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  contacts: state.contacts.items,\n});\nconst mapDispatchToProps = {\n  storageContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport App from './components/app/App';\nimport './index.css';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  // </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}